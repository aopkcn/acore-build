name: 自动编译

on:
  workflow_dispatch:
  schedule:  
  #- cron: "30 22 * * *"
  - cron: "0 * * * *"  # 每小时执行一次
  push:
    branches: [build]
    paths-ignore:
      - 'Version.txt'
      - 'README.md'

#concurrency:
 # group: ${{ github.workflow }})
  #cancel-in-progress: true

jobs:
  version-check:
    name: 检查版本
    runs-on: ubuntu-20.04
    outputs:
      isazerothcore: ${{ steps.update_switch.outputs.isazerothcore }}
      isplayerbot: ${{ steps.update_switch.outputs.isplayerbot }}
    steps:
      - name: 检查提交 ID 是否需要更新
        id: update_switch
        run: |
            AC_ID=$(curl -s https://api.github.com/repos/azerothcore/azerothcore-wotlk/commits/master?per_page=1 | jq -r '.sha')
            LAC_ID=$(curl -s https://raw.githubusercontent.com/aopkcn/acore-build/build/Version.txt | sed -n 's/^Azerothcore=//p')
            BOT_ID=$(curl -s https://api.github.com/repos/liyunfan1223/azerothcore-wotlk/commits/Playerbot?per_page=1 | jq -r '.sha')
            LBOT_ID=$(curl -s https://raw.githubusercontent.com/aopkcn/acore-build/build/Version.txt | sed -n 's/^Playerbot=//p')
            curl -s -L -o Version.txt https://raw.githubusercontent.com/aopkcn/acore-build/build/Version.txt
            echo "最新AC: $AC_ID 保存AC: $LAC_ID"
            echo "最新BOT: $BOT_ID 保存BOT: $LBOT_ID"
    
            message=""
            if [ "$AC_ID" == "$LAC_ID" ] && [ "$BOT_ID" == "$LBOT_ID" ]; then
                echo "当前提交 ID 已是最新，无需更新"
                echo "isazerothcore=true" >> $GITHUB_OUTPUT
                echo "isplayerbot=true" >> $GITHUB_OUTPUT
            else
                if [ "$AC_ID" != "$LAC_ID" ]; then
                    echo "AC 提交 ID 不一致，需要更新"
                    echo "isazerothcore=false" >> $GITHUB_OUTPUT
                    sed -i "s/^Azerothcore=.*/Azerothcore=$AC_ID/" Version.txt
                    message="更新Azerothcore提交ID:$AC_ID \n"
                fi
                if [ "$BOT_ID" != "$LBOT_ID" ]; then
                    echo "BOT 提交 ID 不一致，需要更新"
                    echo "isplayerbot=false" >> $GITHUB_OUTPUT
                    sed -i "s/^Playerbot=.*/Playerbot=$BOT_ID/" Version.txt
                    if [ -n "$message" ]; then
                        message="$message 更新Playerbot提交ID:$BOT_ID"
                    else
                        message="更新Playerbot提交ID:$BOT_ID"
                    fi
                fi

                API_URL="https://api.github.com/repos/${{ github.repository }}/contents/Version.txt"
                FILE_SHA=$(curl -s -H "Authorization: token ${{ secrets.TOKEN }}" \
                                       -H "Accept: application/vnd.github.v3+json" \
                                       "$API_URL?ref=build" | jq -r '.sha')
                curl -X PUT $API_URL \
                    -H "Authorization: token ${{ secrets.TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -d '{
                          "message": "'"$message"'",
                          "content": "'"$(base64 -w 0 Version.txt)"'",
                          "sha": "'"$FILE_SHA"'",
                          "branch": "build"
                        }'
            fi

  ac-docker-build:
    name: ACdocker编译
    needs: version-check
    if: ${{ needs.version-check.outputs.isazerothcore == 'false' }}
    runs-on: ubuntu-20.04
    steps:
      - name: 拉取核心代码
        uses: actions/checkout@v4
        with:
          repository: 'azerothcore/azerothcore-wotlk'
          ref: 'master'

      - name: 拉取当前项目
        uses: actions/checkout@v4
        with:
          ref: 'build'
          path: 'build'

      - name: 拉取Eluna代码
        uses: actions/checkout@v4
        with:
          repository: 'azerothcore/mod-eluna'  
          ref: 'master'
          path: 'modules/mod-eluna'

      - name: 下载并替换MotdMgr.cpp
        run: |
          curl -L -o MotdMgr.cpp https://raw.githubusercontent.com/aopkcn/acore-build/build/MotdMgr.cpp
          mv -f MotdMgr.cpp src/server/game/Motd/MotdMgr.cpp

      - name: 登录Docker容器服务
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} 
          password: ${{ secrets.DOCKERHUB_TOKEN }} 

      - name: 登录GitHub容器服务
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: 登录阿里云容器服务
        uses: docker/login-action@v3
        with:
          registry: registry.cn-chengdu.aliyuncs.com
          username: ${{ secrets.ALYUN_NAME }}
          password: ${{ secrets.ALYUN_TOKEN }}

      - name: 设置编译版本
        id: version
        run: |
            version=$(curl -s https://api.github.com/repos/azerothcore/azerothcore-wotlk/commits/master?per_page=1 | jq -r '.sha')
            echo "version=$version" >> $GITHUB_OUTPUT

      - name: 设置 Docker Buildx 环境
        uses: docker/setup-buildx-action@v3

      - name: 编译 worldserver 
        uses: ./build/.github/ac_docker-build 
        with:
          component-name: worldserver 
          version: ${{ steps.version.outputs.version }} 
          push: true 

      - name: 编译 authserver 
        uses: ./build/.github/ac_docker-build
        with:
          component-name: authserver
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 编译 db-import 
        uses: ./build/.github/ac_docker-build
        with:
          component-name: db-import
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 编译 client-data
        uses: ./build/.github/ac_docker-build
        with:
          component-name: client-data
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 编译 tools
        uses: ./build/.github/ac_docker-build
        with:
          component-name: tools
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 编译 dev-server
        uses: ./build/.github/ac_docker-build
        with:
          component-name: dev
          version: ${{ steps.version.outputs.version }}
          push: true
          dockerfile: apps/docker/Dockerfile.dev-server


  ac-windows-build:
    name: ACWin64编译
    needs: version-check
    if: ${{ needs.version-check.outputs.isazerothcore == 'false' }}
    runs-on: windows-latest
    env:
      BOOST_ROOT: C:\local\boost_1_82_0
    steps:
      - name: 拉取核心代码
        uses: actions/checkout@v4
        with:
          repository: 'azerothcore/azerothcore-wotlk'
          ref: 'master'

      - name: 拉取当前项目
        uses: actions/checkout@v4
        with:
          ref: 'build'
          path: 'build'

      - name: 拉取Eluna代码
        uses: actions/checkout@v4
        with:
          repository: 'azerothcore/mod-eluna'  
          ref: 'master'
          path: 'modules/mod-eluna'

      - name: 下载并替换MotdMgr.cpp
        run: |
          curl -L -o MotdMgr.cpp https://raw.githubusercontent.com/aopkcn/acore-build/master/MotdMgr.cpp
          Move-Item -Path MotdMgr.cpp -Destination src/server/game/Motd/MotdMgr.cpp -Force


      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.13
      - name: Configure OS
        shell: bash
        env:
          CONTINUOUS_INTEGRATION: true
        run: |
          ./acore.sh install-deps
      - name: 编译
        shell: bash
        run: |
          export CTOOLS_BUILD=all
          # export CTYPE=RelWithDebInfo
          ./acore.sh compiler build
      - name: 打包编译文件
        run: |
    
            mkdir -p AzerothCoreWotlk-Win64\lua_scripts
            mkdir -p AzerothCoreWotlk-Win64\data

            Copy-Item -Path "C:\Program Files\OpenSSL\bin\legacy.dll" -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path "C:\Program Files\OpenSSL\bin\libcrypto-1_1-x64.dll" -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path "C:\Program Files\OpenSSL\bin\libssl-1_1-x64.dll" -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path C:\tools\mysql\current\lib\libmysql.dll -Destination AzerothCoreWotlk-Win64
           
            Copy-Item -Path data\sql -Destination AzerothCoreWotlk-Win64\data -Recurse -Force
            Copy-Item -Path env\dist\configs -Destination AzerothCoreWotlk-Win64 -Recurse -Force
            Copy-Item -Path env\dist\authserver.exe -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path env\dist\worldserver.exe -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path env\dist\dbimport.exe -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path env\dist\map_extractor.exe -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path env\dist\mmaps_generator.exe -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path env\dist\vmap4_assembler.exe -Destination AzerothCoreWotlk-Win64
            Copy-Item -Path env\dist\vmap4_extractor.exe -Destination AzerothCoreWotlk-Win64

            Compress-Archive -Path AzerothCoreWotlk-Win64 -DestinationPath AC-Win.zip

      #       Move-Item -Path C:\Program Files\OpenSSL\bin\legacy.dll -Destination var\build\obj\bin\RelWithDebInfo
      #       Move-Item -Path C:\Program Files\OpenSSL\bin\libcrypto-1_1-x64.dll -Destination var\build\obj\bin\RelWithDebInfo
      #       Move-Item -Path C:\Program Files\OpenSSL\bin\libssl-1_1-x64.dll -Destination var\build\obj\bin\RelWithDebInfo
      #       Move-Item -Path C:\tools\mysql\current\lib\libmysql.dll -Destination var\build\obj\bin\RelWithDebInfo
      #       Compress-Archive -Path var\build\obj\bin\RelWithDebInfo\* -DestinationPath AC-Win.zip
      - name: 上传Windows编译文件
        uses: actions/upload-artifact@v4
        with:
         name: AzerothCoreWotlk-Win64
         path: AzerothCoreWotlk-Win64

  ac-bot-docker-build:
    name: AC机器人docker编译
    needs: version-check
    if: ${{ needs.version-check.outputs.isplayerbot == 'false' }}
    runs-on: ubuntu-20.04
    steps:
      - name: 拉取核心代码
        uses: actions/checkout@v4
        with:
          repository: 'liyunfan1223/azerothcore-wotlk'
          ref: 'Playerbot'

      - name: 拉取当前项目
        uses: actions/checkout@v4
        with:
          ref: 'build'
          path: 'build'

      - name: 拉取Eluna代码
        uses: actions/checkout@v4
        with:
          repository: 'azerothcore/mod-eluna'  
          ref: 'master'
          path: 'modules/mod-eluna'

      - name: 拉取playerbots代码
        uses: actions/checkout@v4
        with:
          repository: 'liyunfan1223/mod-playerbots'  
          ref: 'master'
          path: 'modules/mod-playerbots'

      - name: 下载并替换MotdMgr.cpp
        run: |
          curl -L -o MotdMgr.cpp https://raw.githubusercontent.com/aopkcn/acore-build/build/MotdMgr.cpp
          mv -f MotdMgr.cpp src/server/game/Motd/MotdMgr.cpp

      - name: 登录Docker容器服务
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} 
          password: ${{ secrets.DOCKERHUB_TOKEN }} 

      - name: 登录GitHub容器服务
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: 登录阿里云容器服务
        uses: docker/login-action@v3
        with:
          registry: registry.cn-chengdu.aliyuncs.com
          username: ${{ secrets.ALYUN_NAME }}
          password: ${{ secrets.ALYUN_TOKEN }}


      - name: 设置编译版本
        id: version
        run: |
          version=$(curl -s https://api.github.com/repos/liyunfan1223/azerothcore-wotlk/commits/Playerbot?per_page=1 | jq -r '.sha')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: 设置 Docker Buildx 环境
        uses: docker/setup-buildx-action@v3

      - name: 编译 worldserver 
        uses: ./build/.github/ac_bot_docker-build 
        with:
          component-name: worldserver
          version: ${{ steps.version.outputs.version }} 
          push: true 

      - name: 编译 authserver 
        uses: ./build/.github/ac_bot_docker-build
        with:
          component-name: authserver
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 编译 db-import 
        uses: ./build/.github/ac_bot_docker-build
        with:
          component-name: db-import
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 编译 client-data
        uses: ./build/.github/ac_bot_docker-build
        with:
          component-name: client-data
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 编译 tools
        uses: ./build/.github/ac_bot_docker-build
        with:
          component-name: tools
          version: ${{ steps.version.outputs.version }}
          push: true

      - name: 编译 dev-server
        uses: ./build/.github/ac_bot_docker-build
        with:
          component-name: dev
          version: ${{ steps.version.outputs.version }}
          push: true
          dockerfile: apps/docker/Dockerfile.dev-server


  ac-bot-windows-build:
    name: AC机器人Win64编译
    needs: version-check
    if: ${{ needs.version-check.outputs.isplayerbot == 'false' }}
    runs-on: windows-latest
    env:
      BOOST_ROOT: C:\local\boost_1_82_0
    steps:
      - name: 拉取核心代码
        uses: actions/checkout@v4
        with:
          repository: 'liyunfan1223/azerothcore-wotlk'
          ref: 'Playerbot'

      - name: 拉取当前项目
        uses: actions/checkout@v4
        with:
          ref: 'build'
          path: 'build'

      - name: 拉取Eluna代码
        uses: actions/checkout@v4
        with:
          repository: 'azerothcore/mod-eluna'  
          ref: 'master'
          path: 'modules/mod-eluna'

      - name: 拉取playerbots代码
        uses: actions/checkout@v4
        with:
          repository: 'liyunfan1223/mod-playerbots'  
          ref: 'master'
          path: 'modules/mod-playerbots'

      - name: 下载并替换MotdMgr.cpp
        run: |
          curl -L -o MotdMgr.cpp https://raw.githubusercontent.com/aopkcn/acore-build/build/MotdMgr.cpp
          Move-Item -Path MotdMgr.cpp -Destination src/server/game/Motd/MotdMgr.cpp -Force

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.13
      - name: Configure OS
        shell: bash
        env:
          CONTINUOUS_INTEGRATION: true2
        run: |
          ./acore.sh install-deps
      - name: 编译
        shell: bash
        run: |
          export CTOOLS_BUILD=all
          # export CTYPE=RelWithDebInfo
          ./acore.sh compiler build
      - name: 打包编译文件
        run: |
            mkdir -p AzerothCoreWotlkBot-Win64\modules\mod-playerbots\data
            mkdir -p AzerothCoreWotlkBot-Win64\lua_scripts
            mkdir -p AzerothCoreWotlkBot-Win64\data

            Copy-Item -Path "C:\Program Files\OpenSSL\bin\legacy.dll" -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path "C:\Program Files\OpenSSL\bin\libcrypto-1_1-x64.dll" -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path "C:\Program Files\OpenSSL\bin\libssl-1_1-x64.dll" -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path "C:\tools\mysql\current\lib\libmysql.dll" -Destination AzerothCoreWotlkBot-Win64
           
            Copy-Item -Path modules\mod-playerbots\data\sql -Destination AzerothCoreWotlkBot-Win64\modules\mod-playerbots\data\sql -Recurse -Force
            Copy-Item -Path data\sql -Destination AzerothCoreWotlkBot-Win64\data -Recurse -Force
            Copy-Item -Path env\dist\configs -Destination AzerothCoreWotlkBot-Win64 -Recurse -Force
            Copy-Item -Path env\dist\authserver.exe -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path env\dist\worldserver.exe -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path env\dist\dbimport.exe -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path env\dist\map_extractor.exe -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path env\dist\mmaps_generator.exe -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path env\dist\vmap4_assembler.exe -Destination AzerothCoreWotlkBot-Win64
            Copy-Item -Path env\dist\vmap4_extractor.exe -Destination AzerothCoreWotlkBot-Win64

            Compress-Archive -Path AzerothCoreWotlkBot-Win64 -DestinationPath AC-Bot-Win.zip

      #       Move-Item -Path C:\Program Files\OpenSSL\bin\legacy.dll -Destination var\build\obj\bin\RelWithDebInfo
      #       Move-Item -Path C:\Program Files\OpenSSL\bin\libcrypto-1_1-x64.dll -Destination var\build\obj\bin\RelWithDebInfo
      #       Move-Item -Path C:\Program Files\OpenSSL\bin\libssl-1_1-x64.dll -Destination var\build\obj\bin\RelWithDebInfo
      #       Move-Item -Path C:\tools\mysql\current\lib\libmysql.dll -Destination var\build\obj\bin\RelWithDebInfo
      #       Compress-Archive -Path var\build\obj\bin\RelWithDebInfo\* -DestinationPath AC-Bot-Win.zip
      - name: 上传 Windows 编译文件
        uses: actions/upload-artifact@v4
        with:
         name: AzerothCoreWotlkBot-Win64
         path: AzerothCoreWotlkBot-Win64
